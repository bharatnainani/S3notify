name: "Automated CD workflow"
run-name: "[Automated] @${{ github.actor }} ran automated deployment to staging for branch ${{ github.ref_name }}"

on:
  push:
    branches:
      - main

jobs:
  detect-modified-tfvars:
    runs-on: ubuntu-latest
    outputs:
      modified: ${{ steps.detect-tfvars.outputs.modified }}
      files: ${{ steps.detect-tfvars.outputs.files }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.9
          terraform_wrapper: false

      - name: Detect modified .tfvars files
        id: detect-tfvars
        run: |
          MODIFIED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})

          if [ -z "$MODIFIED_FILES" ]; then
            echo "No .tfvars files modified"
            echo "::set-output name=modified::false"
          else
            echo "Modified .tfvars files: $MODIFIED_FILES"
            echo "::set-output name=modified::true"
            FILES_JSON=$(echo "$MODIFIED_FILES" | jq -R -s -c 'split("\n") | map(select(. != ""))')
            echo "::set-output name=files::$FILES_JSON"
          fi

  build-environment-array:
    runs-on: ubuntu-latest
    needs: detect-modified-tfvars
    if: needs.detect-modified-tfvars.outputs.modified == 'true'
    outputs:
      environments: ${{ steps.environments.outputs.environments }}
    steps:
      - name: Build Environments Array
        id: environments
        run: |
          MODIFIED_FILES='${{ needs.detect-modified-tfvars.outputs.files }}'
          environments=()
          for file in $(echo $MODIFIED_FILES | jq -r '.[]'); do
            if echo "$file" | grep -q "sandbox"; then
              environments+=("sandbox")
            elif echo "$file" | grep -q "staging"; then
              environments+=("staging")
            elif echo "$file" | grep -q "prod"; then
              environments+=("prod")
            elif echo "$file" | grep -q "management"; then
              environments+=("management")
            elif echo "$file" | grep -q "logs"; then
              environments+=("logs")
            elif echo "$file" | grep -q "logs-prod"; then
              environments+=("logs-prod")
            elif echo "$file" | grep -q "security"; then
              environments+=("security")
            elif echo "$file" | grep -q "network"; then
              environments+=("network")
            elif echo "$file" | grep -q "network-prod"; then
              environments+=("network-prod")
            elif echo "$file" | grep -q "data"; then
              environments+=("data")
            fi
          done
          environments=$(jq -nc --argjson arr "$(printf '%s\n' "${environments[@]}" | jq -R . | jq -s .)" '$arr')
          echo "Updated environments list: $environments"
          echo "environments=$environments" >> $GITHUB_OUTPUT
        shell: bash

  plan-and-apply:
    runs-on: ubuntu-latest
    needs: build-environment-array
    if: needs.build-environment-array.outputs.environments != '[]'
    strategy:
      matrix:
        environment: ["sandbox"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug environment
        run:  |
          echo "Environment: ${{ matrix.environment }}"
          
      - name: Set oidc-role-arn output
        id: set-oidc-role-arn
        run: echo OIDC_ROLE_ARN_${{ matrix.environment }}.upper()

    # get-role-name-oidc:
    #   runs-on: ubuntu-latest
    #   needs: plan-and-apply
    #   strategy:
    #     matrix:
    #       environment: ${{ fromJson(needs.build-environment-array.outputs.environments) }}
    #   uses: vas-dev/vas-devops-pulse/.github/workflows/cicd.terraform.get_role_name_oidc.yml@main
    #   with:
    #     environment: ${{ matrix.environment }}

  # get-tf-root-module-folders:
  #   runs-on: ubuntu-latest
  #   needs: get-role-name-oidc
  #   strategy:
  #     matrix:
  #       environment: ${{ fromJson(needs.build-environment-array.outputs.environments) }}
  #   uses: vas-dev/vas-devops-pulse/.github/workflows/cicd.terraform.get_tf_root_module_folders.reuse.yml@main

  # terraform-validate:
  #   runs-on: ubuntu-latest
  #   needs: get-tf-root-module-folders
  #   strategy:
  #     matrix:
  #       environment: ${{ fromJson(needs.build-environment-array.outputs.environments) }}
  #   if: ${{ needs.get-tf-root-module-folders.outputs.root-module-folders != '[]' }}
  #   uses: vas-dev/vas-devops-pulse/.github/workflows/ci.terraform.validate.reuse.yml@main
  #   with:
  #     root-module-folders: ${{ needs.get-tf-root-module-folders.outputs.root-module-folders }}

  # terraform-plan:
  #   runs-on: ubuntu-latest
  #   needs: terraform-validate
  #   strategy:
  #     matrix:
  #       environment: ${{ fromJson(needs.build-environment-array.outputs.environments) }}
  #   if: ${{ needs.get-tf-root-module-folders.outputs.root-module-folders != '[]' }}
  #   uses: vas-dev/vas-devops-pulse/.github/workflows/cd.terraform.plan.reuse.yml@main
  #   secrets:
  #     oidc-role-arn: ${{ secrets[needs.get-role-name-oidc.outputs.oidc-name] }}
  #   with:
  #     environment: ${{ matrix.environment }}
  #     root-module-folders: ${{ needs.get-tf-root-module-folders.outputs.root-module-folders }}
  #     commit-id: ${{ github.sha }}

  # terraform-check-plan:
  #   runs-on: ubuntu-latest
  #   needs: terraform-plan
  #   strategy:
  #     matrix:
  #       environment: ${{ fromJson(needs.build-environment-array.outputs.environments) }}
  #   if: ${{ needs.get-tf-root-module-folders.outputs.root-module-folders != '[]' }}
  #   uses: vas-dev/vas-devops-pulse/.github/workflows/cd.terraform.check_plan.reuse.yml@main
  #   with:
  #     environment: ${{ matrix.environment }}
  #     root-module-folders: ${{ needs.get-tf-root-module-folders.outputs.root-module-folders }}
  #     commit-id: ${{ github.sha }}

  # terraform-apply:
  #   runs-on: ubuntu-latest
  #   needs: terraform-check-plan
  #   strategy:
  #     matrix:
  #       environment: ${{ fromJson(needs.build-environment-array.outputs.environments) }}
  #   if: ${{ needs.get-tf-root-module-folders.outputs.root-module-folders != '[]' }}
  #   uses: vas-dev/vas-devops-pulse/.github/workflows/cd.terraform.auto_apply.reuse.yml@main
  #   secrets:
  #     oidc-role-arn: ${{ secrets[needs.get-role-name-oidc.outputs.oidc-name] }}
  #   with:
  #     environment: ${{ matrix.environment }}
  #     root-module-folders: ${{ needs.get-tf-root-module-folders.outputs.root-module-folders }}
  #     commit-id: ${{ github.sha }}
