name: "Automated CD workflow"
run-name: "[Automated] @${{ github.actor }} ran automated deployment to staging for branch ${{ github.ref_name }}"

on:
  push:
    branches:
      - main

jobs:
  detect-modified-tfvars:
    runs-on: ubuntu-latest
    outputs:
      modified: ${{ steps.detect-tfvars.outputs.modified }}
      files: ${{ steps.detect-tfvars.outputs.files }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect modified .tfvars files
        id: detect-tfvars
        run: |
          MODIFIED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})

          if [ -z "$MODIFIED_FILES" ]; then
            echo "No .tfvars files modified"
            echo "::set-output name=modified::false"
          else
            echo "Modified .tfvars files: $MODIFIED_FILES"
            echo "::set-output name=modified::true"
            FILES_JSON=$(echo $MODIFIED_FILES | jq -R -s -c 'split("\n") | map(select(. != ""))')
            echo "::set-output name=files::$FILES_JSON"
          fi

  plan-and-apply:
    runs-on: ubuntu-latest
    needs: detect-modified-tfvars
    if: needs.detect-modified-tfvars.outputs.modified == 'true'
    strategy:
      matrix:
        tfvars-file: ${{ fromJson(needs.detect-modified-tfvars.outputs.files) }}
    outputs:
      environment: ${{ steps.determine-env.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine environment
        id: determine-env
        run: |
          TFVARS_FILE=${{ matrix.tfvars-file }}
          if echo "$TFVARS_FILE" | grep -q "sandbox"; then
            echo "environment=sandbox" >> $GITHUB_ENV
            echo "::set-output name=environment::sandbox"
          elif echo "$TFVARS_FILE" | grep -q "staging"; then
            echo "environment=staging" >> $GITHUB_ENV
            echo "::set-output name=environment::staging"
          elif echo "$TFVARS_FILE" | grep -q "prod"; then
            echo "environment=prod" >> $GITHUB_ENV
            echo "::set-output name=environment::prod"
          elif echo "$TFVARS_FILE" | grep -q "management"; then
            echo "environment=management" >> $GITHUB_ENV
            echo "::set-output name=environment::management"
          elif echo "$TFVARS_FILE" | grep -q "logs"; then
            echo "environment=logs" >> $GITHUB_ENV
            echo "::set-output name=environment::logs"
          elif echo "$TFVARS_FILE" | grep -q "logs-prod"; then
            echo "environment=logs-prod" >> $GITHUB_ENV
            echo "::set-output name=environment::logs-prod"
          elif echo "$TFVARS_FILE" | grep -q "security"; then
            echo "environment=security" >> $GITHUB_ENV
            echo "::set-output name=environment::security"
          elif echo "$TFVARS_FILE" | grep -q "network"; then
            echo "environment=network" >> $GITHUB_ENV
            echo "::set-output name=environment::network"
          elif echo "$TFVARS_FILE" | grep -q "network-prod"; then
            echo "environment=network-prod" >> $GITHUB_ENV
            echo "::set-output name=environment::network-prod"
          elif echo "$TFVARS_FILE" | grep -q "data"; then
            echo "environment=data" >> $GITHUB_ENV
            echo "::set-output name=environment::data"
          fi

#   get_role_name_oidc:
#     #runs-on: ubuntu-latest
#     needs: plan-and-apply
#     if: needs.plan-and-apply.outputs.environment
#     uses: vas-dev/vas-devops-pulse/.github/workflows/cicd.terraform.get_role_name_oidc.yml@main
#     with:
#       environment: ${{ needs.plan-and-apply.outputs.environment }}

#   get_tf_root_module_folders:
#     #runs-on: ubuntu-latest
#     needs: [plan-and-apply, get_role_name_oidc]
#     if: needs.plan-and-apply.outputs.environment
#     uses: vas-dev/vas-devops-pulse/.github/workflows/cicd.terraform.get_tf_root_module_folders.reuse.yml@main

#   terraform_validate:
#     #runs-on: ubuntu-latest
#     needs: [plan-and-apply, get_role_name_oidc, get_tf_root_module_folders]
#     if: needs.plan-and-apply.outputs.environment && needs.get_tf_root_module_folders.outputs.root-module-folders != '[]'
#     uses: vas-dev/vas-devops-pulse/.github/workflows/ci.terraform.validate.reuse.yml@main
#     with:
#       root-module-folders: ${{ needs.get_tf_root_module_folders.outputs.root-module-folders }}

#   terraform_plan:
#     #runs-on: ubuntu-latest
#     needs: [plan-and-apply, get_role_name_oidc, get_tf_root_module_folders, terraform_validate]
#     if: needs.plan-and-apply.outputs.environment && needs.get_tf_root_module_folders.outputs.root-module-folders != '[]'
#     uses: vas-dev/vas-devops-pulse/.github/workflows/cd.terraform.plan.reuse.yml@main
#     secrets:
#       oidc-role-arn: ${{ secrets[needs.get_role_name_oidc.outputs.oidc-name] }}
#     with:
#       environment: ${{ needs.plan-and-apply.outputs.environment }}
#       root-module-folders: ${{ needs.get_tf_root_module_folders.outputs.root-module-folders }}
#       commit-id: ${{ github.sha }}

#   terraform_check_plan:
#     #runs-on: ubuntu-latest
#     needs: [plan-and-apply, get_role_name_oidc, get_tf_root_module_folders, terraform_validate, terraform_plan]
#     if: needs.plan-and-apply.outputs.environment && needs.get_tf_root_module_folders.outputs.root-module-folders != '[]'
#     uses: vas-dev/vas-devops-pulse/.github/workflows/cd.terraform.check_plan.reuse.yml@main
#     with:
#       environment: ${{ needs.plan-and-apply.outputs.environment }}
#       root-module-folders: ${{ needs.get_tf_root_module_folders.outputs.root-module-folders }}
#       commit-id: ${{ github.sha }}

# #   terraform_apply:
# #     #runs-on: ubuntu-latest
# #     needs: [plan-and-apply, get_role_name_oidc, get_tf_root_module_folders, terraform_validate, terraform_plan, terraform_check_plan]
# #     if: needs.plan-and-apply.outputs.environment && needs.get_tf_root_module_folders.outputs.root-module-folders != '[]'
# #     uses: vas-dev/vas-devops-pulse/.github/workflows/cd.terraform.auto_apply.reuse.yml@main
# #     secrets:
# #       oidc-role-arn: ${{ secrets[needs.get_role_name_oidc.outputs.oidc-name] }}
# #     with:
# #       environment: ${{ needs.plan-and-apply.outputs.environment }}
# #       root-module-folders: ${{ needs.get_tf_root_module_folders.outputs.root-module-folders }}
# #       commit-id: ${{ github.sha }}
